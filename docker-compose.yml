# https://docs.docker.com/compose/compose-file/compose-file-v3/
version: "3.8"
name: "kong-telemetry"

volumes:
  certs:
  esdata01:
  kibanadata:
  goplugins:

services:
  # Derived from https://www.elastic.co/blog/getting-started-with-the-elastic-stack-and-docker-compose
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - type: bind
        source: ./setup/entrypoint.sh
        target: /usr/share/elasticsearch/entrypoint.sh
    user: "0"
    command: bash entrypoint.sh
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
     - certs:/usr/share/elasticsearch/config/certs
     - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
      - type: bind
        source: ./kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  apm-server:
    depends_on:
      es01:
        condition: service_healthy
    restart: on-failure
    image: docker.elastic.co/apm/apm-server:${STACK_VERSION}
    user: root  # needed to be able to access certs
    command:
      - -e
      - -E
      - apm-server.auth.secret_token=${ELASTIC_APM_SECRET_TOKEN}
      - -E
      - output.elasticsearch.password=${ELASTIC_PASSWORD}
    ports:
      - 8200:8200
    volumes:
      - certs:/usr/share/apm-server/certs
      - type: bind
        source: ./apm-server.docker.yml
        target: /usr/share/apm-server/apm-server.yml
        read_only: true
    healthcheck:
      # https://who23.github.io/2020/12/03/sockets-in-your-shell.html
      test: |
        bash -c 'set -eu; exec 3<>/dev/tcp/localhost/8200; echo $?'
      interval: 10s
      timeout: 2s
      retries: 10

  dice:
    build: dice
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name=dice,service.version=0.1.0,deployment.environment=production
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://apm-server:8200
      - "OTEL_EXPORTER_OTLP_HEADERS=Authorization=Bearer ${ELASTIC_APM_SECRET_TOKEN}"
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=otlp

  go-plugins:
    build: goplugin
    restart: "no"
    volumes:
      - goplugins:/mnt/goplugins
    command: |
      cp /go/bin/goplugin /mnt/goplugins/.

  kong:
    image: kong:3.3.0
    depends_on:
      dice:
        condition: service_started
      go-plugins:
        condition: service_completed_successfully
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "2"
    # https://docs.konghq.com/gateway/3.3.x/production/environment-variables/
    environment:
      KONG_LOG_LEVEL: info
      KONG_PROXY_ACCESS_LOG: "off"  #/dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: 0.0.0.0:8080 reuseport backlog=163840
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PORT_MAPS: "80:8080"
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong.yml

      # https://docs.konghq.com/gateway/3.3.x/reference/configuration/#tracing_instrumentations
      KONG_TRACING_INSTRUMENTATIONS: request,dns_query,router,http_client,plugin_access,plugin_header_filter
      # https://docs.konghq.com/gateway/3.3.x/reference/configuration/#tracing_sampling_rate
      KONG_TRACING_SAMPLING_RATE: "1.0"

      # https://docs.konghq.com/gateway/3.3.x/reference/configuration/#plugins
      KONG_PLUGINS: bundled,goplugin
      # https://docs.konghq.com/gateway/3.3.x/reference/configuration/#pluginserver_names
      KONG_PLUGINSERVER_NAMES: goplugin

      # Idea: can we pass env vars in the command?
      KONG_PLUGINSERVER_GOPLUGIN_START_CMD: /goplugins/goplugin -instrument -kong-prefix /usr/local/kong/
      KONG_PLUGINSERVER_GOPLUGIN_QUERY_CMD: /goplugins/goplugin -dump
      KONG_PLUGINSERVER_GOPLUGIN_SOCKET: /usr/local/kong/goplugin.socket

      ELASTIC_APM_AUTH_HEADER: "Bearer ${ELASTIC_APM_SECRET_TOKEN}"

    volumes:
      - ./kong.yml:/kong.yml:ro
      - goplugins:/goplugins:ro
    ports:
      - 80:8080
      # - 443:8443
      - 127.0.0.1:8001:8001
    healthcheck:
      test: kong health
      interval: 10s
      timeout: 2s
      retries: 10
